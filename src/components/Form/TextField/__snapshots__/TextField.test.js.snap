// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TextField /> rendered correctly with Default fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with Disabled fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with Error fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with InvalidMarker fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with ValidMarker fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with Value fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with With helper fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with noLabel fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with password fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with small fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`<TextField /> rendered correctly with smallNoLabel fixture 1`] = `
<TextField
  disabled={false}
  helper={
    <div>
      Test HTML
    </div>
  }
  id="demo"
  inline={false}
  isValid={true}
  label="First Name"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  value=""
>
  <div
    className="outer hasMarker"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        First Name
      </label>
    </div>
    <div
      className="helper"
    >
      <Popover
        content={
          <div>
            Test HTML
          </div>
        }
        light={true}
      >
        <Tooltip
          animateFill={true}
          animation="shift"
          arrow={false}
          arrowSize="regular"
          className=""
          delay={100}
          disabled={false}
          distance={10}
          duration={375}
          followCursor={false}
          hideDelay={300}
          hideDuration={375}
          hideOnClick={true}
          html={
            <PopoverDisplay
              className={undefined}
              light={true}
              tooltip={undefined}
            >
              <div>
                Test HTML
              </div>
            </PopoverDisplay>
          }
          inertia={false}
          interactive={true}
          interactiveBorder={16}
          multiple={false}
          offset={0}
          onHidden={[Function]}
          onHide={[Function]}
          onRequestClose={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          popperOptions={Object {}}
          position="bottom-start"
          size="regular"
          sticky={false}
          stickyDuration={200}
          style={Object {}}
          theme="dark"
          touchHold={false}
          trigger="mouseenter"
          unmountHTMLWhenHide={false}
        >
          <div
            className=""
            style={
              Object {
                "display": "inline",
              }
            }
          >
            <Help
              className="helperIcon"
              fill="currentColor"
              height={32}
              width={32}
            >
              <svg
                className="helperIcon"
                fill="currentColor"
                height={32}
                viewBox="0 0 24 24"
                width={32}
              >
                <path
                  d="M12 0C5.384 0 0 5.384 0 12s5.384 12 12 12 12-5.384 12-12S18.616 0 12 0zm0 2c5.535 0 10 4.465 10 10s-4.465 10-10 10S2 17.535 2 12 6.465 2 12 2z"
                />
                <path
                  d="M12 6c-1.693 0-3.094 1.114-3.709 2.52a1.001 1.001 0 1 0 1.834.802C10.41 8.672 11.305 8 12 8c1.033 0 2 .967 2 2s-.967 2-2 2a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-1.205c1.7-.46 3-1.963 3-3.795 0-2.185-1.815-4-4-4zM13 18a1 1 0 0 1-1 1 1 1 0 0 1-1-1 1 1 0 0 1 1-1 1 1 0 0 1 1 1z"
                />
              </svg>
            </Help>
          </div>
        </Tooltip>
      </Popover>
    </div>
  </div>
</TextField>
`;

exports[`TextField test interaction 1`] = `
<TextField
  disabled={false}
  helper={null}
  id="demo"
  inline={false}
  isValid={true}
  label="Label"
  marker={false}
  name="demo"
  onBlur={[Function]}
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "props": Object {
              "disabled": false,
              "helper": null,
              "id": "demo",
              "inline": false,
              "isValid": true,
              "label": "Label",
              "marker": false,
              "name": "demo",
              "onBlur": [Function],
              "onChange": [MockFunction] {
                "calls": [Circular],
              },
              "onFocus": [Function],
              "value": "",
            },
            "value": "",
          },
        ],
      ],
    }
  }
  onFocus={[Function]}
  value=""
>
  <div
    className="outer"
  >
    <div
      className="block"
    >
      <input
        className="input"
        disabled={false}
        id="demo"
        name="demo"
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <label
        className="label"
        htmlFor="demo"
      >
        Label
      </label>
    </div>
  </div>
</TextField>
`;
